//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 12 2015 14:15:46).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@protocol FBWhistleDelegate;

@interface FBWhistleClient : NSObject
{
    id <FBWhistleDelegate> _delegate;
    struct unique_ptr<proxygen::mqttclient::MQTTClient, std::__1::default_delete<proxygen::mqttclient::MQTTClient>> _client;
    struct unique_ptr<MQTTClientGlue, std::__1::default_delete<MQTTClientGlue>> _glue;
    // Error parsing type: {EventBase="_vptr$TimeoutManager"^^?"_vptr$DrivableExecutor"^^?"pendingCobTimeouts_"{list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>="data_"{data_t="root_plus_size_"{root_plus_size="root_"{list_node<void *>="next_"^{list_node<void *>}"prev_"^{list_node<void *>}}}}}"loopCallbacks_"{list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>="data_"{data_t="root_plus_size_"{root_plus_size="root_"{list_node<void *>="next_"^{list_node<void *>}"prev_"^{list_node<void *>}}}}}"runBeforeLoopCallbacks_"{list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>="data_"{data_t="root_plus_size_"{root_plus_size="root_"{list_node<void *>="next_"^{list_node<void *>}"prev_"^{list_node<void *>}}}}}"onDestructionCallbacks_"{list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>="data_"{data_t="root_plus_size_"{root_plus_size="root_"{list_node<void *>="next_"^{list_node<void *>}"prev_"^{list_node<void *>}}}}}"runOnceCallbacks_"^{list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<2>, boost::intrusive::none, boost::intrusive::none>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, boost::intrusive::none>}"stop_"{atomic<bool>="__a_"AB}"loopThread_"{atomic<_opaque_pthread_t *>="__a_"A^{_opaque_pthread_t}}"evb_"^{event_base}"queue_"{unique_ptr<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> >, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > >="__ptr_"{__compressed_pair<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > *, std::__1::default_delete<folly::NotificationQueue<std::__1::pair<void (*)(void *), void *> > > >="__first_"^{NotificationQueue<std::__1::pair<void (*)(void *), void *> >}}}"fnRunner_"{unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> >="__ptr_"{__compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> >="__first_"^{FunctionRunner}}}"maxLatency_"q"avgLoopTime_"{SmoothLoopTime="expCoeff_"d"value_"d"oldBusyLeftover_"q}"maxLatencyLoopTime_"{SmoothLoopTime="expCoeff_"d"value_"d"oldBusyLeftover_"q}"maxLatencyCob_"{function<void ()>="__buf_"{type="__lx"[12C]}"__f_"^{__base<void ()>}}"enableTimeMeasurement_"B"nextLoopCnt_"Q"latestLoopCnt_"Q"startWork_"Q"observer_"{shared_ptr<folly::EventBaseObserver>="__ptr_"^{EventBaseObserver}"__cntrl_"^{__shared_weak_count}}"observerSampleCount_"I"executionObserver_"^{ExecutionObserver}"name_"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}"onDestructionCallbacksMutex_"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}}}, name: _evb
    unsigned int _backgroundTaskID;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)publishWithTopic:(id)arg1 payload:(id)arg2 qos:(int)arg3 context:(int)arg4;
- (void)_sendMessageInEventBase:(unique_ptr_065b03e5)arg1;
- (void)_endBackgroundTask;
- (void)_beginBackgroundTask;
- (void)endBackgroundTaskIfNeeded;
- (void)sendKeepAliveOnce;
- (void)stopKeepAliveTask;
- (void)startKeepAliveTask;
- (void)disconnect;
- (void)unsubscribeWithTopics:(id)arg1;
- (void)subscribeWithTopics:(id)arg1;
- (void)connectWithHostname:(id)arg1 port:(int)arg2 username:(id)arg3 password:(id)arg4 secure:(BOOL)arg5;
- (void)connectWithHostname:(id)arg1 port:(int)arg2 connPayload:(id)arg3 secure:(BOOL)arg4;
- (void)startEventLoop;
- (id)initWithDelegate:(id)arg1 clientID:(id)arg2 settings:(id)arg3;

@end

